    global
        daemon
        maxconn 200000
        user nobody
        pidfile /var/run/haproxy_test.pid

    defaults
        mode http
        timeout connect 5000ms
        timeout client 120000ms
        timeout server 120000ms
        maxconn 200000
        default-server maxconn 20000

    frontend http-in
        bind *:3008
        acl node_http_down nbsrv(node_http) eq 0
        acl status_query path /status /haproxy_status

        use_backend node_http if status_query
        use_backend http_down if node_http_down
        default_backend node_http

        # not using forwardfor, instead using send-proxy
        #option forwardfor
        # http close so that we get a new connection for each request and get the forwardfor
        #   header added consistently.  This would be more efficient not to do this and
        #   instead stash the forwardfor address on the socket somehow, but that seems to
        #   not quite work in node
        #option http-server-close
        #option forceclose

    frontend https-in
        bind *:3009
        default_backend node_https
        mode tcp

    backend node_http
        timeout check 1s
        option httpchk GET /health
        http-check expect status 200
        server server00 127.0.0.1:3002 check
#        server server00 127.0.0.1:3002 send-proxy check
#        server server01 1.2.3.4:3002 send-proxy check

        balance leastconn

#        # Also store source ip in table and use that for stickiness without cookies
#        # or for https connections
#        stick-table type ip size 1m expire 3h
#        stick on src

        # add monitoring page to http server
        stats enable
        stats uri /haproxy_status
        stats refresh 15s
        stats realm   Haproxy\\ Statistics
        stats auth    admin:password
        stats admin if LOCALHOST

    backend http_down
        server maint_redir 107.21.92.64:80 redir http://static.cloudparty.com/maintenance/ backup non-stick

    backend node_https
        mode tcp
        timeout check 1s
        option httpchk GET /health
        http-check expect status 200
        # Using the stud port to redirect to, but checking on the http port
        server server00 127.0.0.1:3006 check port 3002
#        server server00 127.0.0.1:3006 send-proxy check port 3002
#        server server01 1.2.3.4:3006 send-proxy check port 3002

        server maint_redir 127.0.0.1:3007 backup non-stick

        balance leastconn

#        # stick based on source ip, and re-use table from http
#        #stick on src table node_http
#
#        # from HAProxy doc - use SSLID for stickiness - works even if user IP changes
#        # maximum SSL session ID length is 32 bytes.
#        stick-table type binary len 32 size 1m expire 3h
#        acl clienthello req_ssl_hello_type 1
#        acl serverhello rep_ssl_hello_type 2
#        # use tcp content accepts to detects ssl client and server hello.
#        tcp-request inspect-delay 5s
#        tcp-request content accept if clienthello
#        # no timeout on response inspect delay by default.
#        tcp-response content accept if serverhello
#        # SSL session ID (SSLID) may be present on a client or server hello.
#        # Its length is coded on 1 byte at offset 43 and its value starts
#        # at offset 44.
#        # Match and learn on request if client hello.
#        stick on payload_lv(43,1) if clienthello
#        # Learn on response if server hello.
#        stick store-response payload_lv(43,1) if serverhello
